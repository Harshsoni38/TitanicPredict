# -*- coding: utf-8 -*-
"""titanic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-cqeOCz9X1OGcHW1twmiaZwNU673uT9O
"""

import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files


uploaded = files.upload()





train_df=pd.read_csv("train.csv")
test_df=pd.read_csv("test.csv")

train_df.head()

train_df.info()

train_df.drop(columns=["Cabin"],inplace=True)

test_df.drop(columns=["Cabin"],inplace=True)

train_df.isnull().sum()

train_df['Embarked'].value_counts()

train_df['Embarked']=train_df["Embarked"].fillna('S')

train_df.isnull().sum()

test_df.isnull().sum()

test_df['Fare']=test_df['Fare'].fillna(test_df['Fare'].mean())

test_df.isnull().sum()

train_age=np.random.randint(train_df['Age'].mean()-train_df['Age'].std(),train_df['Age'].mean()+train_df['Age'].std(),177)
test_age=np.random.randint(test_df['Age'].mean()-test_df['Age'].std(),test_df['Age'].mean()+test_df['Age'].std(),86)

train_df['Age'][train_df['Age'].isnull()]=train_age

train_df.isnull().sum()

test_df['Age'][test_df['Age'].isnull()]=test_age

test_df.isnull().sum()

train_df.head()

train_df.drop(columns=['Ticket'],inplace=True)
test_df.drop(columns=['Ticket'],inplace=True)

train_df['family']=train_df['SibSp']+train_df['Parch']+1
test_df['family']=test_df['SibSp']+test_df['Parch']+1

train_df['family'].value_counts()

def cal(number):
    if number==1:
        return "alone"
    elif number>1 and number<5:
        return "Medium"
    else:
        return "Large"

train_df['family size']=train_df['family'].apply(cal)
test_df['family size']=test_df['family'].apply(cal)

passengerId=test_df['PassengerId'].values

train_df.drop(columns=['PassengerId'],inplace=True)
test_df.drop(columns=['PassengerId'],inplace=True)

# Extract 'Title' from the 'Name' column to get the title part
train_df['Title'] = train_df['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]
test_df['Title'] = test_df['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]
# Grouping titles into broader categories
def group_titles(title):
    if title in ['Mr', 'Don', 'Sir']:
        return 'Mr'
    elif title in ['Mrs', 'Mme', 'Lady', 'the Countess', 'Dona']:
        return 'Mrs'
    elif title in ['Miss', 'Mlle']:
        return 'Miss'
    elif title == 'Master':
        return 'Master'
    elif title in ['Rev', 'Dr', 'Col', 'Major', 'Capt']:
        return 'Officer'
    else:
        return 'Other'

# Apply the grouping function to the 'Title' column
train_df['Title'] = train_df['Title'].apply(group_titles)
test_df['Title'] = test_df['Title'].apply(group_titles)

# Display the count of unique values in the 'Title' column to understand its distribution
print(train_df['Title'].value_counts())



# Plot the count of each title after grouping
sns.barplot(
    x=train_df['Title'].value_counts().index,
    y=train_df['Title'].value_counts().values,
    palette='coolwarm'
           )

# Add labels and title
plt.title('Title feature value counts after grouping', fontsize=16, fontweight='bold')
plt.xlabel('Title', fontsize=12, fontweight='bold')
plt.ylabel('Number of Passengers', fontsize=12, fontweight='bold')

# Add data labels on top of each bar
title_counts = train_df['Title'].value_counts()
for i, count in enumerate(title_counts.values):
    plt.text(i, count + 1, str(count), ha='center', va='bottom', fontsize=10, fontweight='bold')

# Display the plot
plt.tight_layout()
plt.show()

sns.barplot(
    x=train_df['family size'].value_counts().index,
    y=train_df['family size'].value_counts().values,
    palette='coolwarm'
           )

# Add labels and title
plt.title('Count of people by family size', fontsize=16, fontweight='bold')
plt.xlabel('Title', fontsize=12, fontweight='bold')
plt.ylabel('Number of Passengers', fontsize=12, fontweight='bold')

# Add data labels on top of each bar
title_counts = train_df['family size'].value_counts()
for i, count in enumerate(title_counts.values):
    plt.text(i, count + 1, str(count), ha='center', va='bottom', fontsize=12, fontweight='bold')

# Display the plot
plt.tight_layout()
plt.show()

sns.barplot(
    x=train_df['Pclass'].value_counts().index.astype(str),
    y=train_df['Pclass'].value_counts().values,
    palette='coolwarm'
           )

# Add labels and title
plt.title('Count of people by Pclass', fontsize=16, fontweight='bold')
plt.xlabel('Pclass', fontsize=12, fontweight='bold')
plt.ylabel('Number of Passengers', fontsize=12, fontweight='bold')

# Add data labels on top of each bar
pclass_counts = train_df['Pclass'].value_counts()
for i, count in enumerate(pclass_counts.values):
    plt.text(i, count + 1, str(count), ha='center', va='bottom', fontsize=12, fontweight='bold')

# Display the plot
plt.tight_layout()
plt.show()

# Create the age distribution plot
sns.histplot(
    data=train_df['Age'],
    kde=True,
    bins=30,
    color='#e74c3c',
    alpha=0.7
)

# Add title and labels
plt.title('Age Distribution of Passengers', fontsize=16, fontweight='bold')
plt.xlabel('Age', fontsize=12, fontweight='bold')
plt.ylabel('Number of Passengers', fontsize=12, fontweight='bold')

# Customize the ticks
plt.xticks(fontsize=10, fontweight='bold')
plt.yticks(fontsize=10, fontweight='bold')

# Improve layout
plt.tight_layout()

# Show the plot
plt.show()



train_df=pd.get_dummies(train_df,columns=['Pclass','Title','Sex','Embarked','family size'],drop_first=True)
test_df=pd.get_dummies(test_df,columns=['Pclass','Title','Sex','Embarked','family size'],drop_first=True)

train_df=train_df.drop(['Name'],axis=1)

train_df.head()

# Plot the correlation matrix of DataFrame features to see if any features are strongly correlated
sns.heatmap(train_df.corr(numeric_only=True), annot=True, cmap='coolwarm', fmt='.2f', linewidths=.5, linecolor='black')

plt.title('Correlation Matrix of Dataset Features', fontsize=20)
plt.xticks(rotation=90, fontsize=10)
plt.yticks(fontsize=10)
plt.show()

X=train_df.iloc[:,1:].values
y=train_df.iloc[:,0].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

!pip install scikit-learn

from sklearn.tree import DecisionTreeClassifier

classifier=DecisionTreeClassifier()

classifier.fit(X_train,y_train)

y_pred=classifier.predict(X_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_pred,y_test)

Xf=test_df.iloc[:,:].values

test_df = pd.DataFrame(Xf) # Convert the array Xf to a pandas DataFrame
test_df = test_df.drop(0, axis=1) # Drop the first column
Xf = test_df.values # Convert the DataFrame back to a NumPy array

y_final=classifier.predict(Xf)

y_final.shape

final=pd.DataFrame()
final

final['passengerId']=passengerId
final['survived']=y_final

final